name: CI/CD Pipeline - Finkraft Assignment 

on:
  push:
    branches:
      - master

env:
  # Global variables
  IMAGE_NAME: devops-release-flask-chart
  IMAGE_TAG: ${{ github.sha }}
  REGISTRY_BASE: docker.io/
  HELM_CHART_PATH: ./flask-chart 

jobs:

  # --------------------------------------------------------------------------
  # CI Stage: Build, Test, and Push Image
  # --------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    environment: Finkraft  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install flake8 pytest
          pip install -r requirements.txt

      - name: Lint & Test Application Code
        run: |
          echo "Running Linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Running Pytest..."
          pytest 

      - name: üîí Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }} 

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY_BASE }}${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.REGISTRY_BASE }}${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --------------------------------------------------------------------------
  # CD Stage: Deploy to Minikube running on the runner VM
  # --------------------------------------------------------------------------
  cd:
    needs: ci 
    runs-on: ubuntu-latest
    environment: Finkraft
    permissions:
      id-token: write # Required for OIDC
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN }} 
          aws-region: us-east-1
    
      - name: Connect to EKS Cluster and Configure Kubeconfig
        run: |
          # The AWS CLI automatically configures kubectl to use the assumed IAM role
          aws eks update-kubeconfig --name your-eks-finkraft --region us-east-1 
        
      # --- 3. HELM DEPLOYMENT ---
      - name: Install and Configure Helm
        uses: azure/setup-helm@v4

      - name: Deploy Application with Helm
        # Helm uses the Kubeconfig automatically set by the 'aws eks update-kubeconfig' command
        run: |
          helm upgrade --install devops-release-flask-chart ${{ env.HELM_CHART_PATH }} \
            --namespace default \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --atomic \
            --timeout 5m

      - name: Verify Deployed Image
        run: |
          echo "Waiting for deployment rollout..."
          # Wait for the deployment to fully roll out
          kubectl rollout status deployment/devops-release-flask-chart --timeout=60s
          
          # Get the image name of the running container
          DEPLOYED_IMAGE=$(kubectl get deployment devops-release-flask-chart \
            -o=jsonpath="{.spec.template.spec.containers[0].image}")
            
          echo "--- Deployment Verification Successful ---"
          echo "Deployed Image: $DEPLOYED_IMAGE"
